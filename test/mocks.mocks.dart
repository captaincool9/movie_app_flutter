// Mocks generated by Mockito 5.4.6 from annotations
// in movie_app/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_app/data/models/movie_model.dart' as _i2;
import 'package:movie_app/data/services/movie_service.dart' as _i6;
import 'package:movie_app/domain/repository/movie_repository.dart' as _i3;
import 'package:movie_app/presentation/cubit/movie_cubit.dart' as _i7;
import 'package:movie_app/presentation/cubit/movie_state.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieModel_0 extends _i1.SmartFake implements _i2.MovieModel {
  _FakeMovieModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMovieRepository_1 extends _i1.SmartFake
    implements _i3.MovieRepository {
  _FakeMovieRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMovieState_2 extends _i1.SmartFake implements _i4.MovieState {
  _FakeMovieState_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i3.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.Results>> getPopularMovies() =>
      (super.noSuchMethod(
            Invocation.method(#getPopularMovies, []),
            returnValue: _i5.Future<List<_i2.Results>>.value(<_i2.Results>[]),
          )
          as _i5.Future<List<_i2.Results>>);
}

/// A class which mocks [MovieService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieService extends _i1.Mock implements _i6.MovieService {
  MockMovieService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.MovieModel> fetchPopularMovies() =>
      (super.noSuchMethod(
            Invocation.method(#fetchPopularMovies, []),
            returnValue: _i5.Future<_i2.MovieModel>.value(
              _FakeMovieModel_0(
                this,
                Invocation.method(#fetchPopularMovies, []),
              ),
            ),
          )
          as _i5.Future<_i2.MovieModel>);
}

/// A class which mocks [MovieCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieCubit extends _i1.Mock implements _i7.MovieCubit {
  MockMovieCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.MovieRepository);

  @override
  _i4.MovieState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeMovieState_2(this, Invocation.getter(#state)),
          )
          as _i4.MovieState);

  @override
  _i5.Stream<_i4.MovieState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i4.MovieState>.empty(),
          )
          as _i5.Stream<_i4.MovieState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void fetchMovies() => super.noSuchMethod(
    Invocation.method(#fetchMovies, []),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i4.MovieState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i8.Change<_i4.MovieState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
